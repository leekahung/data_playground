Current Version 1.1.0b
Updated date: September 4, 2018
Dihedral/Torsional Solver (a.k.a - AngleSolver)
The program was made to solve dihedral angles of generic 4 point systems

Section 0 [Requirements]

Python (version >= 3.4.4)
matplotlib module
pandas module
numpy module

Section 1 [Revisions]
Revision in 1.1.0b, September 4, 2018
 - Notes for VMD users, the index in this program is listed as index+1 (i.e. if VMD says index: 0, please using index: 1 in this program)

Revision in 1.1.0, May 24, 2016
 - Added Time Step option for AngleSolver_Input.txt
 - Outputed graphs are now in time scales of picoseconds instead of geometries

Revision in 1.0.9, Nov 20, 2015
 - Added pointsys() for 2 atom, 2 midpoint system
 - Added distance finder() to find the distance between points in your system
 - Included option to input system type in input file
 - Separated calculation and plotting functions (AngleSolver() for calculation, 
   AngleSolverPlotter() for plotting)
 - __main__.py file had been modified to include AngleSolverPlotter()

Revision in 1.0.8, Nov 13, 2015
 - Made inputreader() function to read inputs of atoms, step, MDfreq, Numberofparts, Atom1-4 for foursys and Atom1-12 for centsys
 - Started Documentation for AngleSolver program about how to format an AngleSolver input file in .txt format
 - .txt file of atom coordinates must be named xyzcoords.txt
 - Removed comments in code and placed explanations in README file

Revision in 1.0.7, Nov 11, 2015
 - tkinter removed, program can now run .txt files from working directory of AngleSolver code

Revision in 1.0.6, Nov 8, 2015
 - Small revisions to the plotting algorithm to generate a png
   file
 - Made __main__.py file for executing code

Revision in 1.0.5, Nov 5, 2015
 - Separated angle solving portion from coordinates acquiring parts of
   the code, called anglesolver(), foursys(), centsys(), rangefinder()
 - Grouped anglesolver(), rangefinder(), foursys(), centsys(), systemchooser()
   into a class called main()

Revision in 1.0.4, Nov 4, 2015
 - Fixed the issue with the anglesolvercentsys() when solving for the
   geometric center of the ring structures

Revision in 1.0.3, Nov 2, 2015
 - Removed manual corrections for the atan2 function, which is
   by convention, have ranges [-pi, pi], see
   http://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html
   for reference
 - Crossed referenced with molden to check if dihedral
   angle values are correct, points 0, 1, and 4989, which
   contained both positive and negative angles values
 - Tested code on a unit circle and molden for cross reference
   check

Revisions in 1.0.2
 - Called anglesolver as anglesolver4sys(), which will solve for angles
   for 4 atoms
 - Merged the two sections (mainpd() and anglesolver4sys())
   into a single script
 - Included a function called anglesolvercentsys(), which
   will solve for angles using 2 atoms and the centers of
   2 different hexagonal structures
 - Created systemchoose() function for system selection
   for angle calculation

Revisions in 1.0.1
 - Included additional comments
 - Commented off lines meant for troubleshooting
 - Converted second section of script into a function

Section 2 [Documentation]

The units outputed by AngleSolver this Angstrom and degrees. This
program works for all xyz files generated by DFTB+.

To run AngleSolver to just generate csv files, only 1 python file
and 2 text files are required: AngleSolver.py, AngleSolver_Input.txt
and xyzcoords.txt.

To run AngleSolver with a plot maker, 3 instead of 1 python file are
required:  __main__.py, AngleSolver.py, and AngleSolverPlotter.py;
where AngleSolverPlotter.py does the plotting and __main__.py calls
both AngleSolver and AngleSolverPlotter

As long as all files are in the same directory, AngleSolver.py will run.
To run the code, you can either use Anaconda and open __main__.py or you
can use the regular IDLE by double clicking on __main__.py. If you’re
using the IDLE, all you have to do is to click on the python shell and
press f5, if you’re using windows/linux, or fn+f5, if you’re using mac.

For those interested in the coding of AngleSolver.py, the program is
consist of one class named main() and 8 functions.

main() is the class the contains the functions for solving dihedral/torsional angles

mainpd() is a function that searches and generates csv files of xyz coordinates
of your overall system (whole structure) into the AngleSolver directory, else if
you already have the csv file, it will skip to the calculations

inputreader() is a function that searches for your input script in the AngleSolver
directory and uses it for calculations

rangefinder() is a function that calculates the overall range (total number of atoms
in all your steps) of your system

foursys() is a function that searches for foursys in your system:

Defining foursys as a four atom system where:
Atom 1 to Atom 2 = vector a
Atom 2 to Atom 4 = vector b
Atom 4 to Atom 3 = vector c

and generates csv files for each atom in foursys system if desired.

centsys() is a function that searches for centsys in your system:

Defining centsys as a two atom, 2 center system where:
Atom 1 to c1 = vector a
c1 to c2 = vector b
c2 to Atom 7 = vector c
c1 = Center of hexagonal ring structure 1
c2 = Center of hexagonal ring structure 2

and generates cvs files for each atom in centsys system if desired.

pointsys() is a function that searches for pointsys in your system:

Defining pointsys as a two atom, 2 points system where:
Atom 1 to m1 = vector a
m1 to m2 = vector b
m2 to Atom 4 = vector c
m1 = Midpoint of Atom 2 and Atom 3
m2 = Midpoint of Atom 4 and Atom 5

and generates cvs files for each atom in pointsys system if desired.

anglesolver(a,b,c) is a function that calculates dihedral angles for the chosen
system and generates .png file of the results in the form of a plot as well as an
.csv file.

distancefinder(a,b,c) is a function that calculates dihedral angles for the chosen
system and generates of the results in form of a .csv file.

a, b, c corresponds to the vectors a, b, and c in foursys, centsys, pointsys

To make xyzcoords.txt from DFTB+ .xyz files use the following command in the terminal:
awk '{print $1,$2,$3,$4}' yourxyzfile.xyz > xyzcoords.txt

This will make sure just the coordinates are grabbed.

To append all .xyz files together use the following command in the terminal:
cat *.xyz > allstructures.xyz

If you want to make it in order, i.e. - from 1.xyz to 10.xyz, use a script:
totalsteps=10
for steps in `seq 1 totalsteps`; do
  cat ${steps}.xyz
done > allstructures.xyz

You can also do it manually, if the number of files are small:
cat file1.xyz file2.xyz file3.xyz ... > allstructures.xyz

AngleSolver_Input.txt format

atoms = (Input number of atoms in system)
steps = (Input total number of MD Steps in simulation. Otherwise,
	insert the number of geometries or .xyz files you have appended
        to xyzcoords.txt.)
MDfreq = (Input MD frequency of MD simulation. Otherwise, insert 1 if
	 it is not an MD simulation, i.e. - quenched/optimized, else
         it'll give you bogus results!)
Numberofparts = (Input number of parts in MD simulation if running
		continuous MD simulations. Otherwise, insert 1 here.)
System = (Input 0 for foursys, 1 for centsys, 2 for point sys)

(For foursys)
Atom1 = (Atom 1 for four atom system)
Atom2 = (Atom 2 for four atom system)
Atom3 = (Atom 3 for four atom system)
Atom4 = (Atom 4 for four atom system)

(For centsys)
Atom1 = (Atom 1 for 2 atom, 2 center system)
Atom2 = (Atom 2 for 2 atom, 2 center system)
Atom3 = (Atom 3 for 2 atom, 2 center system)
Atom4 = (Atom 4 for 2 atom, 2 center system)
Atom5 = (Atom 5 for 2 atom, 2 center system)
Atom6 = (Atom 6 for 2 atom, 2 center system)
Atom7 = (Atom 7 for 2 atom, 2 center system)
Atom8 = (Atom 8 for 2 atom, 2 center system)
Atom9 = (Atom 9 for 2 atom, 2 center system)
Atom10 = (Atom 10 for 2 atom, 2 center system)
Atom11 = (Atom 11 for 2 atom, 2 center system)
Atom12 = (Atom 12 for 2 atom, 2 center system)

(For pointsys)
Atom1 = (Atom 1 for 2 point, 2 atom system)
Atom2 = (Atom 2 for 2 point, 2 atom system)
Atom3 = (Atom 3 for 2 point, 2 atom system)
Atom4 = (Atom 4 for 2 point, 2 atom system)
Atom5 = (Atom 5 for 2 point, 2 atom system)
Atom6 = (Atom 6 for 2 point, 2 atom system)

TimeStep = (Time step used in MD simulation (in femtoseconds) * 10; i.e. - if Time step used was 0.4 fs, insert 4)
